[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\tlyma\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\tlyma\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 18.0.2.1)
[debug]       Load.loadUnit: plugins took 269.2305ms
[debug]       Load.loadUnit: defsScala took 0.6064ms
[debug] [Loading] Scanning directory C:\Users\tlyma\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tlyma\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.3819 ms
[debug]           Load.resolveProject(global-plugins) took 36.8778ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\tlyma\.sbt\1.0\plugins, plugins: List(<none>))) took 75.1733ms
[debug] [Loading] Done in C:\Users\tlyma\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 104.3736ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1446ms
[debug]     Load.loadUnit(file:/C:/Users/tlyma/.sbt/1.0/plugins/, ...) took 391.395ms
[debug]   Load.apply: load took 679.2994ms
[debug]   Load.apply: resolveProjects took 5.3226ms
[debug]   Load.apply: finalTransforms took 92.4322ms
[debug]   Load.apply: config.delegates took 27.304ms
[debug]   Load.apply: Def.make(settings)... took 710.1482ms
[debug]   Load.apply: structureIndex took 192.7707ms
[debug]   Load.apply: mkStreams took 8.8156ms
[info] loading global plugins from C:\Users\tlyma\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3533.1625ms
[debug]           Load.loadUnit: plugins took 16.6482ms
[debug]           Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\Users\tlyma\Documents\GitHub\FunctionalRockPaperScissors\project
[debug]             Load.loadUnit: mkEval took 13.9987ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tlyma\Documents\GitHub\FunctionalRockPaperScissors\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.3354 ms
[info] loading settings for project functionalrockpaperscissors-build from idea.sbt ...
[debug]               Load.resolveProject(functionalrockpaperscissors-build) took 6.7973ms
[debug]             Load.loadTransitive: finalizeProject(Project(id functionalrockpaperscissors-build, base: C:\Users\tlyma\Documents\GitHub\FunctionalRockPaperScissors\project, plugins: List(<none>))) took 11.0392ms
[debug] [Loading] Done in C:\Users\tlyma\Documents\GitHub\FunctionalRockPaperScissors\project, returning: (functionalrockpaperscissors-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4004.8469ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.5157ms
[debug]         Load.loadUnit(file:/C:/Users/tlyma/Documents/GitHub/FunctionalRockPaperScissors/project/, ...) took 4027.8227ms
[debug]       Load.apply: load took 4029.4891ms
[debug]       Load.apply: resolveProjects took 0.0999ms
[debug]       Load.apply: finalTransforms took 9.1238ms
[debug]       Load.apply: config.delegates took 0.4461ms
[debug]       Load.apply: Def.make(settings)... took 120.5622ms
[debug]       Load.apply: structureIndex took 31.8085ms
[debug]       Load.apply: mkStreams took 0.0038ms
[info] loading project definition from C:\Users\tlyma\Documents\GitHub\FunctionalRockPaperScissors\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 8261.9239ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\tlyma\Documents\GitHub\FunctionalRockPaperScissors
[debug]       Load.loadUnit: mkEval took 0.1849ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.6152 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 54.0546ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\tlyma\Documents\GitHub\FunctionalRockPaperScissors, plugins: List(<none>))) took 60.6486ms
[debug] [Loading] Done in C:\Users\tlyma\Documents\GitHub\FunctionalRockPaperScissors, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1361.7711ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.4255ms
[debug]   Load.loadUnit(file:/C:/Users/tlyma/Documents/GitHub/FunctionalRockPaperScissors/, ...) took 9635.9615ms
[debug] Load.apply: load took 9637.2334ms
[debug] Load.apply: resolveProjects took 0.0797ms
[debug] Load.apply: finalTransforms took 28.4638ms
[debug] Load.apply: config.delegates took 0.1958ms
[debug] Load.apply: Def.make(settings)... took 90.5409ms
[debug] Load.apply: structureIndex took 23.6692ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to rockpaperscissors (in build file:/C:/Users/tlyma/Documents/GitHub/FunctionalRockPaperScissors/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63335 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63335, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to rockpaperscissors (in build file:/C:/Users/tlyma/Documents/GitHub/FunctionalRockPaperScissors/)
[debug] > Exec(idea-shell, None, None)
